name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Set execute permission for Maven Wrapper
        run: chmod +x .mvn/mvnw

      - name: Install Snyk CLI
        uses: snyk/actions/setup@v2

      - name: SAST Scan with Snyk
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: snyk code test --all-projects --severity-threshold=high

      - name: Build Docker images for services
        run: |
          ./.mvn/mvnw compile jib:dockerBuild -pl articles_feed_service -Dimage=basmafj/articles_feed_service:latest
          ./.mvn/mvnw compile jib:dockerBuild -pl reports_feed_service -Dimage=basmafj/reports_feed_service:latest
          ./.mvn/mvnw compile jib:dockerBuild -pl login_service -Dimage=basmafj/login_service:latest
          ./.mvn/mvnw compile jib:dockerBuild -pl blog_cr_service -Dimage=basmafj/blog_cr_service:latest
          ./.mvn/mvnw compile jib:dockerBuild -pl ApiGateway -Dimage=basmafj/apigateway:latest
          ./.mvn/mvnw compile jib:dockerBuild -pl Discovery_service -Dimage=basmafj/discovery_service:latest

      - name: List Docker images
        run: docker images

      - name: Log in to Docker Hub
        env:
          DOCKER_ACCESS_TOKEN: ${{ secrets.DOCKER_ACCESS_TOKEN }}
        run: echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Push Docker images to Docker Hub
        run: |
          docker push basmafj/articles_feed_service:latest
          docker push basmafj/reports_feed_service:latest
          docker push basmafj/login_service:latest
          docker push basmafj/blog_cr_service:latest
          docker push basmafj/apigateway:latest
          docker push basmafj/discovery_service:latest
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Update kubeconfig for Amazon EKS
        run: aws eks update-kubeconfig --name spacenews --region eu-north-1

      - name: Deploy to Amazon EKS
        run: |
          kubectl apply -f k8s/apigateway-deployment.yaml
          kubectl apply -f k8s/discovery-server-deployment.yaml
          kubectl apply -f k8s/login-service-deployment.yaml
          kubectl apply -f k8s/article-feed-service-deployment.yaml
          kubectl apply -f k8s/blog-cr-service-deployment.yaml
          kubectl apply -f k8s/frontend-deployment.yaml
          kubectl apply -f k8s/postgres-db-deployment.yaml
          kubectl apply -f k8s/postgres-db-claim0-persistentvolumeclaim.yaml
